// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.11.4
// source: backend.proto

package pb_gen

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_backend_proto protoreflect.FileDescriptor

var file_backend_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x08, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x62,
	0x69, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xbe, 0x0d, 0x0a, 0x0e, 0x43, 0x61,
	0x72, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x0a,
	0x41, 0x64, 0x64, 0x43, 0x61, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x17, 0x2e, 0x63, 0x61, 0x72,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x41, 0x64, 0x64, 0x43, 0x61, 0x72, 0x50,
	0x6f, 0x72, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x41, 0x64, 0x64, 0x43, 0x61, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x1a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x63, 0x61, 0x72, 0x2f, 0x41, 0x64, 0x64, 0x43,
	0x61, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x67, 0x0a, 0x0d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x2e, 0x63, 0x61, 0x72,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x50,
	0x6f, 0x72, 0x74, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x63, 0x61,
	0x72, 0x2f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x3a,
	0x01, 0x2a, 0x12, 0x58, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x17, 0x2e, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x47,
	0x65, 0x74, 0x43, 0x61, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x61, 0x72, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x50,
	0x6f, 0x72, 0x74, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x63, 0x61,
	0x72, 0x2f, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x5f, 0x0a, 0x0b,
	0x4d, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x2e, 0x63, 0x61,
	0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x4d, 0x47, 0x65, 0x74, 0x43, 0x61,
	0x72, 0x50, 0x6f, 0x72, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x4d, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x50, 0x6f, 0x72, 0x74,
	0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x63, 0x61, 0x72, 0x2f, 0x4d,
	0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x5c, 0x0a,
	0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x63, 0x61,
	0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x1a, 0x18, 0x2e, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x22, 0x1b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x4d, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x14, 0x2e, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x15, 0x2e, 0x63,
	0x61, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x08, 0x4d, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x52, 0x65, 0x71, 0x4d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x16, 0x2e,
	0x63, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x4d, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x2f, 0x4d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x3a, 0x01, 0x2a,
	0x12, 0x50, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x50, 0x61, 0x72, 0x6b, 0x12, 0x14, 0x2e, 0x63, 0x61,
	0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x41, 0x64, 0x64, 0x50, 0x61, 0x72,
	0x6b, 0x1a, 0x15, 0x2e, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x41, 0x64, 0x64, 0x50, 0x61, 0x72, 0x6b, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12,
	0x22, 0x0d, 0x2f, 0x70, 0x61, 0x72, 0x6b, 0x2f, 0x41, 0x64, 0x64, 0x50, 0x61, 0x72, 0x6b, 0x3a,
	0x01, 0x2a, 0x12, 0x5c, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x6b,
	0x12, 0x17, 0x2e, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x6b, 0x1a, 0x18, 0x2e, 0x63, 0x61, 0x72, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x6b, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x70, 0x61,
	0x72, 0x6b, 0x2f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x6b, 0x3a, 0x01, 0x2a,
	0x12, 0x4d, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x6b, 0x12, 0x14, 0x2e, 0x63, 0x61,
	0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x6b, 0x1a, 0x15, 0x2e, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x6b, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f,
	0x12, 0x0d, 0x2f, 0x70, 0x61, 0x72, 0x6b, 0x2f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x6b, 0x12,
	0x54, 0x0a, 0x08, 0x4d, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x6b, 0x12, 0x15, 0x2e, 0x63, 0x61,
	0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x4d, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x72, 0x6b, 0x1a, 0x16, 0x2e, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x4d, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x6b, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x13, 0x22, 0x0e, 0x2f, 0x70, 0x61, 0x72, 0x6b, 0x2f, 0x4d, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x72, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x4d, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6c, 0x6c,
	0x12, 0x14, 0x2e, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x47,
	0x65, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x1a, 0x15, 0x2e, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x22, 0x15, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x2f, 0x47, 0x65, 0x74,
	0x42, 0x69, 0x6c, 0x6c, 0x12, 0x54, 0x0a, 0x08, 0x4d, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6c, 0x6c,
	0x12, 0x15, 0x2e, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x4d,
	0x47, 0x65, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x1a, 0x16, 0x2e, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x4d, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x22,
	0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x2f, 0x4d,
	0x47, 0x65, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0x53, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x2e, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x16, 0x2e,
	0x63, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x53, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x2e, 0x63, 0x61,
	0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x16, 0x2e, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x12, 0x12, 0x10, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x4d, 0x65, 0x74, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x53, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x15, 0x2e, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x50,
	0x61, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x16, 0x2e, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x50, 0x61, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2f, 0x50, 0x61, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x53, 0x0a, 0x08, 0x42, 0x69, 0x6c,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x2e, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x52, 0x65, 0x71, 0x42, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x16, 0x2e, 0x63,
	0x61, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x42, 0x69, 0x6c, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x42, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46,
	0x0a, 0x04, 0x50, 0x61, 0x72, 0x6b, 0x12, 0x11, 0x2e, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x52, 0x65, 0x71, 0x50, 0x61, 0x72, 0x6b, 0x1a, 0x12, 0x2e, 0x63, 0x61, 0x72, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x50, 0x61, 0x72, 0x6b, 0x22, 0x17, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x11, 0x22, 0x0c, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x50,
	0x61, 0x72, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x4e, 0x0a, 0x06, 0x50, 0x69, 0x63, 0x6b, 0x55, 0x70,
	0x12, 0x13, 0x2e, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x50,
	0x69, 0x63, 0x6b, 0x55, 0x70, 0x1a, 0x14, 0x2e, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x50, 0x69, 0x63, 0x6b, 0x55, 0x70, 0x22, 0x19, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x50, 0x69, 0x63,
	0x6b, 0x55, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0x42, 0x0a, 0x03, 0x50, 0x61, 0x79, 0x12, 0x10, 0x2e,
	0x63, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x50, 0x61, 0x79, 0x1a,
	0x11, 0x2e, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x50,
	0x61, 0x79, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x22, 0x0b, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2f, 0x50, 0x61, 0x79, 0x3a, 0x01, 0x2a, 0x42, 0x1a, 0x5a, 0x18, 0x73, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x63, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x2f,
	0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_backend_proto_goTypes = []interface{}{
	(*ReqAddCarPort)(nil),     // 0: car_port.ReqAddCarPort
	(*ReqUpdateCarPort)(nil),  // 1: car_port.ReqUpdateCarPort
	(*ReqGetCarPort)(nil),     // 2: car_port.ReqGetCarPort
	(*ReqMGetCarPort)(nil),    // 3: car_port.ReqMGetCarPort
	(*ReqUpdateUser)(nil),     // 4: car_port.ReqUpdateUser
	(*ReqGetUser)(nil),        // 5: car_port.ReqGetUser
	(*ReqMGetUser)(nil),       // 6: car_port.ReqMGetUser
	(*ReqAddPark)(nil),        // 7: car_port.ReqAddPark
	(*ReqUpdatePark)(nil),     // 8: car_port.ReqUpdatePark
	(*ReqGetPark)(nil),        // 9: car_port.ReqGetPark
	(*ReqMGetPark)(nil),       // 10: car_port.ReqMGetPark
	(*ReqGetBill)(nil),        // 11: car_port.ReqGetBill
	(*ReqMGetBill)(nil),       // 12: car_port.ReqMGetBill
	(*ReqUserInfo)(nil),       // 13: car_port.ReqUserInfo
	(*ReqMetaInfo)(nil),       // 14: car_port.ReqMetaInfo
	(*ReqParkInfo)(nil),       // 15: car_port.ReqParkInfo
	(*ReqBillInfo)(nil),       // 16: car_port.ReqBillInfo
	(*ReqPark)(nil),           // 17: car_port.ReqPark
	(*ReqPickUp)(nil),         // 18: car_port.ReqPickUp
	(*ReqPay)(nil),            // 19: car_port.ReqPay
	(*RespAddCarPort)(nil),    // 20: car_port.RespAddCarPort
	(*RespUpdateCarPort)(nil), // 21: car_port.RespUpdateCarPort
	(*RespGetCarPort)(nil),    // 22: car_port.RespGetCarPort
	(*RespMGetCarPort)(nil),   // 23: car_port.RespMGetCarPort
	(*RespUpdateUser)(nil),    // 24: car_port.RespUpdateUser
	(*RespGetUser)(nil),       // 25: car_port.RespGetUser
	(*RespMGetUser)(nil),      // 26: car_port.RespMGetUser
	(*RespAddPark)(nil),       // 27: car_port.RespAddPark
	(*RespUpdatePark)(nil),    // 28: car_port.RespUpdatePark
	(*RespGetPark)(nil),       // 29: car_port.RespGetPark
	(*RespMGetPark)(nil),      // 30: car_port.RespMGetPark
	(*RespGetBill)(nil),       // 31: car_port.RespGetBill
	(*RespMGetBill)(nil),      // 32: car_port.RespMGetBill
	(*RespUserInfo)(nil),      // 33: car_port.RespUserInfo
	(*RespMetaInfo)(nil),      // 34: car_port.RespMetaInfo
	(*RespParkInfo)(nil),      // 35: car_port.RespParkInfo
	(*RespBillInfo)(nil),      // 36: car_port.RespBillInfo
	(*RespPark)(nil),          // 37: car_port.RespPark
	(*RespPickUp)(nil),        // 38: car_port.RespPickUp
	(*RespPay)(nil),           // 39: car_port.RespPay
}
var file_backend_proto_depIdxs = []int32{
	0,  // 0: car_port.CarPortService.AddCarPort:input_type -> car_port.ReqAddCarPort
	1,  // 1: car_port.CarPortService.UpdateCarPort:input_type -> car_port.ReqUpdateCarPort
	2,  // 2: car_port.CarPortService.GetCarPort:input_type -> car_port.ReqGetCarPort
	3,  // 3: car_port.CarPortService.MGetCarPort:input_type -> car_port.ReqMGetCarPort
	4,  // 4: car_port.CarPortService.UpdateUser:input_type -> car_port.ReqUpdateUser
	5,  // 5: car_port.CarPortService.GetUser:input_type -> car_port.ReqGetUser
	6,  // 6: car_port.CarPortService.MGetUser:input_type -> car_port.ReqMGetUser
	7,  // 7: car_port.CarPortService.AddPark:input_type -> car_port.ReqAddPark
	8,  // 8: car_port.CarPortService.UpdatePark:input_type -> car_port.ReqUpdatePark
	9,  // 9: car_port.CarPortService.GetPark:input_type -> car_port.ReqGetPark
	10, // 10: car_port.CarPortService.MGetPark:input_type -> car_port.ReqMGetPark
	11, // 11: car_port.CarPortService.GetBill:input_type -> car_port.ReqGetBill
	12, // 12: car_port.CarPortService.MGetBill:input_type -> car_port.ReqMGetBill
	13, // 13: car_port.CarPortService.UserInfo:input_type -> car_port.ReqUserInfo
	14, // 14: car_port.CarPortService.MetaInfo:input_type -> car_port.ReqMetaInfo
	15, // 15: car_port.CarPortService.ParkInfo:input_type -> car_port.ReqParkInfo
	16, // 16: car_port.CarPortService.BillInfo:input_type -> car_port.ReqBillInfo
	17, // 17: car_port.CarPortService.Park:input_type -> car_port.ReqPark
	18, // 18: car_port.CarPortService.PickUp:input_type -> car_port.ReqPickUp
	19, // 19: car_port.CarPortService.Pay:input_type -> car_port.ReqPay
	20, // 20: car_port.CarPortService.AddCarPort:output_type -> car_port.RespAddCarPort
	21, // 21: car_port.CarPortService.UpdateCarPort:output_type -> car_port.RespUpdateCarPort
	22, // 22: car_port.CarPortService.GetCarPort:output_type -> car_port.RespGetCarPort
	23, // 23: car_port.CarPortService.MGetCarPort:output_type -> car_port.RespMGetCarPort
	24, // 24: car_port.CarPortService.UpdateUser:output_type -> car_port.RespUpdateUser
	25, // 25: car_port.CarPortService.GetUser:output_type -> car_port.RespGetUser
	26, // 26: car_port.CarPortService.MGetUser:output_type -> car_port.RespMGetUser
	27, // 27: car_port.CarPortService.AddPark:output_type -> car_port.RespAddPark
	28, // 28: car_port.CarPortService.UpdatePark:output_type -> car_port.RespUpdatePark
	29, // 29: car_port.CarPortService.GetPark:output_type -> car_port.RespGetPark
	30, // 30: car_port.CarPortService.MGetPark:output_type -> car_port.RespMGetPark
	31, // 31: car_port.CarPortService.GetBill:output_type -> car_port.RespGetBill
	32, // 32: car_port.CarPortService.MGetBill:output_type -> car_port.RespMGetBill
	33, // 33: car_port.CarPortService.UserInfo:output_type -> car_port.RespUserInfo
	34, // 34: car_port.CarPortService.MetaInfo:output_type -> car_port.RespMetaInfo
	35, // 35: car_port.CarPortService.ParkInfo:output_type -> car_port.RespParkInfo
	36, // 36: car_port.CarPortService.BillInfo:output_type -> car_port.RespBillInfo
	37, // 37: car_port.CarPortService.Park:output_type -> car_port.RespPark
	38, // 38: car_port.CarPortService.PickUp:output_type -> car_port.RespPickUp
	39, // 39: car_port.CarPortService.Pay:output_type -> car_port.RespPay
	20, // [20:40] is the sub-list for method output_type
	0,  // [0:20] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_backend_proto_init() }
func file_backend_proto_init() {
	if File_backend_proto != nil {
		return
	}
	file_user_proto_init()
	file_car_port_proto_init()
	file_park_proto_init()
	file_client_proto_init()
	file_bill_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_backend_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_backend_proto_goTypes,
		DependencyIndexes: file_backend_proto_depIdxs,
	}.Build()
	File_backend_proto = out.File
	file_backend_proto_rawDesc = nil
	file_backend_proto_goTypes = nil
	file_backend_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CarPortServiceClient is the client API for CarPortService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CarPortServiceClient interface {
	AddCarPort(ctx context.Context, in *ReqAddCarPort, opts ...grpc.CallOption) (*RespAddCarPort, error)
	UpdateCarPort(ctx context.Context, in *ReqUpdateCarPort, opts ...grpc.CallOption) (*RespUpdateCarPort, error)
	GetCarPort(ctx context.Context, in *ReqGetCarPort, opts ...grpc.CallOption) (*RespGetCarPort, error)
	MGetCarPort(ctx context.Context, in *ReqMGetCarPort, opts ...grpc.CallOption) (*RespMGetCarPort, error)
	UpdateUser(ctx context.Context, in *ReqUpdateUser, opts ...grpc.CallOption) (*RespUpdateUser, error)
	GetUser(ctx context.Context, in *ReqGetUser, opts ...grpc.CallOption) (*RespGetUser, error)
	MGetUser(ctx context.Context, in *ReqMGetUser, opts ...grpc.CallOption) (*RespMGetUser, error)
	AddPark(ctx context.Context, in *ReqAddPark, opts ...grpc.CallOption) (*RespAddPark, error)
	UpdatePark(ctx context.Context, in *ReqUpdatePark, opts ...grpc.CallOption) (*RespUpdatePark, error)
	GetPark(ctx context.Context, in *ReqGetPark, opts ...grpc.CallOption) (*RespGetPark, error)
	MGetPark(ctx context.Context, in *ReqMGetPark, opts ...grpc.CallOption) (*RespMGetPark, error)
	GetBill(ctx context.Context, in *ReqGetBill, opts ...grpc.CallOption) (*RespGetBill, error)
	MGetBill(ctx context.Context, in *ReqMGetBill, opts ...grpc.CallOption) (*RespMGetBill, error)
	//------------------client rpc------------------
	UserInfo(ctx context.Context, in *ReqUserInfo, opts ...grpc.CallOption) (*RespUserInfo, error)
	MetaInfo(ctx context.Context, in *ReqMetaInfo, opts ...grpc.CallOption) (*RespMetaInfo, error)
	ParkInfo(ctx context.Context, in *ReqParkInfo, opts ...grpc.CallOption) (*RespParkInfo, error)
	BillInfo(ctx context.Context, in *ReqBillInfo, opts ...grpc.CallOption) (*RespBillInfo, error)
	Park(ctx context.Context, in *ReqPark, opts ...grpc.CallOption) (*RespPark, error)
	PickUp(ctx context.Context, in *ReqPickUp, opts ...grpc.CallOption) (*RespPickUp, error)
	Pay(ctx context.Context, in *ReqPay, opts ...grpc.CallOption) (*RespPay, error)
}

type carPortServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCarPortServiceClient(cc grpc.ClientConnInterface) CarPortServiceClient {
	return &carPortServiceClient{cc}
}

func (c *carPortServiceClient) AddCarPort(ctx context.Context, in *ReqAddCarPort, opts ...grpc.CallOption) (*RespAddCarPort, error) {
	out := new(RespAddCarPort)
	err := c.cc.Invoke(ctx, "/car_port.CarPortService/AddCarPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carPortServiceClient) UpdateCarPort(ctx context.Context, in *ReqUpdateCarPort, opts ...grpc.CallOption) (*RespUpdateCarPort, error) {
	out := new(RespUpdateCarPort)
	err := c.cc.Invoke(ctx, "/car_port.CarPortService/UpdateCarPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carPortServiceClient) GetCarPort(ctx context.Context, in *ReqGetCarPort, opts ...grpc.CallOption) (*RespGetCarPort, error) {
	out := new(RespGetCarPort)
	err := c.cc.Invoke(ctx, "/car_port.CarPortService/GetCarPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carPortServiceClient) MGetCarPort(ctx context.Context, in *ReqMGetCarPort, opts ...grpc.CallOption) (*RespMGetCarPort, error) {
	out := new(RespMGetCarPort)
	err := c.cc.Invoke(ctx, "/car_port.CarPortService/MGetCarPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carPortServiceClient) UpdateUser(ctx context.Context, in *ReqUpdateUser, opts ...grpc.CallOption) (*RespUpdateUser, error) {
	out := new(RespUpdateUser)
	err := c.cc.Invoke(ctx, "/car_port.CarPortService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carPortServiceClient) GetUser(ctx context.Context, in *ReqGetUser, opts ...grpc.CallOption) (*RespGetUser, error) {
	out := new(RespGetUser)
	err := c.cc.Invoke(ctx, "/car_port.CarPortService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carPortServiceClient) MGetUser(ctx context.Context, in *ReqMGetUser, opts ...grpc.CallOption) (*RespMGetUser, error) {
	out := new(RespMGetUser)
	err := c.cc.Invoke(ctx, "/car_port.CarPortService/MGetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carPortServiceClient) AddPark(ctx context.Context, in *ReqAddPark, opts ...grpc.CallOption) (*RespAddPark, error) {
	out := new(RespAddPark)
	err := c.cc.Invoke(ctx, "/car_port.CarPortService/AddPark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carPortServiceClient) UpdatePark(ctx context.Context, in *ReqUpdatePark, opts ...grpc.CallOption) (*RespUpdatePark, error) {
	out := new(RespUpdatePark)
	err := c.cc.Invoke(ctx, "/car_port.CarPortService/UpdatePark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carPortServiceClient) GetPark(ctx context.Context, in *ReqGetPark, opts ...grpc.CallOption) (*RespGetPark, error) {
	out := new(RespGetPark)
	err := c.cc.Invoke(ctx, "/car_port.CarPortService/GetPark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carPortServiceClient) MGetPark(ctx context.Context, in *ReqMGetPark, opts ...grpc.CallOption) (*RespMGetPark, error) {
	out := new(RespMGetPark)
	err := c.cc.Invoke(ctx, "/car_port.CarPortService/MGetPark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carPortServiceClient) GetBill(ctx context.Context, in *ReqGetBill, opts ...grpc.CallOption) (*RespGetBill, error) {
	out := new(RespGetBill)
	err := c.cc.Invoke(ctx, "/car_port.CarPortService/GetBill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carPortServiceClient) MGetBill(ctx context.Context, in *ReqMGetBill, opts ...grpc.CallOption) (*RespMGetBill, error) {
	out := new(RespMGetBill)
	err := c.cc.Invoke(ctx, "/car_port.CarPortService/MGetBill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carPortServiceClient) UserInfo(ctx context.Context, in *ReqUserInfo, opts ...grpc.CallOption) (*RespUserInfo, error) {
	out := new(RespUserInfo)
	err := c.cc.Invoke(ctx, "/car_port.CarPortService/UserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carPortServiceClient) MetaInfo(ctx context.Context, in *ReqMetaInfo, opts ...grpc.CallOption) (*RespMetaInfo, error) {
	out := new(RespMetaInfo)
	err := c.cc.Invoke(ctx, "/car_port.CarPortService/MetaInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carPortServiceClient) ParkInfo(ctx context.Context, in *ReqParkInfo, opts ...grpc.CallOption) (*RespParkInfo, error) {
	out := new(RespParkInfo)
	err := c.cc.Invoke(ctx, "/car_port.CarPortService/ParkInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carPortServiceClient) BillInfo(ctx context.Context, in *ReqBillInfo, opts ...grpc.CallOption) (*RespBillInfo, error) {
	out := new(RespBillInfo)
	err := c.cc.Invoke(ctx, "/car_port.CarPortService/BillInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carPortServiceClient) Park(ctx context.Context, in *ReqPark, opts ...grpc.CallOption) (*RespPark, error) {
	out := new(RespPark)
	err := c.cc.Invoke(ctx, "/car_port.CarPortService/Park", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carPortServiceClient) PickUp(ctx context.Context, in *ReqPickUp, opts ...grpc.CallOption) (*RespPickUp, error) {
	out := new(RespPickUp)
	err := c.cc.Invoke(ctx, "/car_port.CarPortService/PickUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carPortServiceClient) Pay(ctx context.Context, in *ReqPay, opts ...grpc.CallOption) (*RespPay, error) {
	out := new(RespPay)
	err := c.cc.Invoke(ctx, "/car_port.CarPortService/Pay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarPortServiceServer is the server API for CarPortService service.
type CarPortServiceServer interface {
	AddCarPort(context.Context, *ReqAddCarPort) (*RespAddCarPort, error)
	UpdateCarPort(context.Context, *ReqUpdateCarPort) (*RespUpdateCarPort, error)
	GetCarPort(context.Context, *ReqGetCarPort) (*RespGetCarPort, error)
	MGetCarPort(context.Context, *ReqMGetCarPort) (*RespMGetCarPort, error)
	UpdateUser(context.Context, *ReqUpdateUser) (*RespUpdateUser, error)
	GetUser(context.Context, *ReqGetUser) (*RespGetUser, error)
	MGetUser(context.Context, *ReqMGetUser) (*RespMGetUser, error)
	AddPark(context.Context, *ReqAddPark) (*RespAddPark, error)
	UpdatePark(context.Context, *ReqUpdatePark) (*RespUpdatePark, error)
	GetPark(context.Context, *ReqGetPark) (*RespGetPark, error)
	MGetPark(context.Context, *ReqMGetPark) (*RespMGetPark, error)
	GetBill(context.Context, *ReqGetBill) (*RespGetBill, error)
	MGetBill(context.Context, *ReqMGetBill) (*RespMGetBill, error)
	//------------------client rpc------------------
	UserInfo(context.Context, *ReqUserInfo) (*RespUserInfo, error)
	MetaInfo(context.Context, *ReqMetaInfo) (*RespMetaInfo, error)
	ParkInfo(context.Context, *ReqParkInfo) (*RespParkInfo, error)
	BillInfo(context.Context, *ReqBillInfo) (*RespBillInfo, error)
	Park(context.Context, *ReqPark) (*RespPark, error)
	PickUp(context.Context, *ReqPickUp) (*RespPickUp, error)
	Pay(context.Context, *ReqPay) (*RespPay, error)
}

// UnimplementedCarPortServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCarPortServiceServer struct {
}

func (*UnimplementedCarPortServiceServer) AddCarPort(context.Context, *ReqAddCarPort) (*RespAddCarPort, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCarPort not implemented")
}
func (*UnimplementedCarPortServiceServer) UpdateCarPort(context.Context, *ReqUpdateCarPort) (*RespUpdateCarPort, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCarPort not implemented")
}
func (*UnimplementedCarPortServiceServer) GetCarPort(context.Context, *ReqGetCarPort) (*RespGetCarPort, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarPort not implemented")
}
func (*UnimplementedCarPortServiceServer) MGetCarPort(context.Context, *ReqMGetCarPort) (*RespMGetCarPort, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MGetCarPort not implemented")
}
func (*UnimplementedCarPortServiceServer) UpdateUser(context.Context, *ReqUpdateUser) (*RespUpdateUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (*UnimplementedCarPortServiceServer) GetUser(context.Context, *ReqGetUser) (*RespGetUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedCarPortServiceServer) MGetUser(context.Context, *ReqMGetUser) (*RespMGetUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MGetUser not implemented")
}
func (*UnimplementedCarPortServiceServer) AddPark(context.Context, *ReqAddPark) (*RespAddPark, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPark not implemented")
}
func (*UnimplementedCarPortServiceServer) UpdatePark(context.Context, *ReqUpdatePark) (*RespUpdatePark, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePark not implemented")
}
func (*UnimplementedCarPortServiceServer) GetPark(context.Context, *ReqGetPark) (*RespGetPark, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPark not implemented")
}
func (*UnimplementedCarPortServiceServer) MGetPark(context.Context, *ReqMGetPark) (*RespMGetPark, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MGetPark not implemented")
}
func (*UnimplementedCarPortServiceServer) GetBill(context.Context, *ReqGetBill) (*RespGetBill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBill not implemented")
}
func (*UnimplementedCarPortServiceServer) MGetBill(context.Context, *ReqMGetBill) (*RespMGetBill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MGetBill not implemented")
}
func (*UnimplementedCarPortServiceServer) UserInfo(context.Context, *ReqUserInfo) (*RespUserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfo not implemented")
}
func (*UnimplementedCarPortServiceServer) MetaInfo(context.Context, *ReqMetaInfo) (*RespMetaInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetaInfo not implemented")
}
func (*UnimplementedCarPortServiceServer) ParkInfo(context.Context, *ReqParkInfo) (*RespParkInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParkInfo not implemented")
}
func (*UnimplementedCarPortServiceServer) BillInfo(context.Context, *ReqBillInfo) (*RespBillInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BillInfo not implemented")
}
func (*UnimplementedCarPortServiceServer) Park(context.Context, *ReqPark) (*RespPark, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Park not implemented")
}
func (*UnimplementedCarPortServiceServer) PickUp(context.Context, *ReqPickUp) (*RespPickUp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PickUp not implemented")
}
func (*UnimplementedCarPortServiceServer) Pay(context.Context, *ReqPay) (*RespPay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pay not implemented")
}

func RegisterCarPortServiceServer(s *grpc.Server, srv CarPortServiceServer) {
	s.RegisterService(&_CarPortService_serviceDesc, srv)
}

func _CarPortService_AddCarPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAddCarPort)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarPortServiceServer).AddCarPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car_port.CarPortService/AddCarPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarPortServiceServer).AddCarPort(ctx, req.(*ReqAddCarPort))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarPortService_UpdateCarPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateCarPort)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarPortServiceServer).UpdateCarPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car_port.CarPortService/UpdateCarPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarPortServiceServer).UpdateCarPort(ctx, req.(*ReqUpdateCarPort))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarPortService_GetCarPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetCarPort)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarPortServiceServer).GetCarPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car_port.CarPortService/GetCarPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarPortServiceServer).GetCarPort(ctx, req.(*ReqGetCarPort))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarPortService_MGetCarPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMGetCarPort)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarPortServiceServer).MGetCarPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car_port.CarPortService/MGetCarPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarPortServiceServer).MGetCarPort(ctx, req.(*ReqMGetCarPort))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarPortService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarPortServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car_port.CarPortService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarPortServiceServer).UpdateUser(ctx, req.(*ReqUpdateUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarPortService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarPortServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car_port.CarPortService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarPortServiceServer).GetUser(ctx, req.(*ReqGetUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarPortService_MGetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMGetUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarPortServiceServer).MGetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car_port.CarPortService/MGetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarPortServiceServer).MGetUser(ctx, req.(*ReqMGetUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarPortService_AddPark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAddPark)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarPortServiceServer).AddPark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car_port.CarPortService/AddPark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarPortServiceServer).AddPark(ctx, req.(*ReqAddPark))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarPortService_UpdatePark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdatePark)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarPortServiceServer).UpdatePark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car_port.CarPortService/UpdatePark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarPortServiceServer).UpdatePark(ctx, req.(*ReqUpdatePark))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarPortService_GetPark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetPark)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarPortServiceServer).GetPark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car_port.CarPortService/GetPark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarPortServiceServer).GetPark(ctx, req.(*ReqGetPark))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarPortService_MGetPark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMGetPark)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarPortServiceServer).MGetPark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car_port.CarPortService/MGetPark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarPortServiceServer).MGetPark(ctx, req.(*ReqMGetPark))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarPortService_GetBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetBill)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarPortServiceServer).GetBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car_port.CarPortService/GetBill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarPortServiceServer).GetBill(ctx, req.(*ReqGetBill))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarPortService_MGetBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMGetBill)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarPortServiceServer).MGetBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car_port.CarPortService/MGetBill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarPortServiceServer).MGetBill(ctx, req.(*ReqMGetBill))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarPortService_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarPortServiceServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car_port.CarPortService/UserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarPortServiceServer).UserInfo(ctx, req.(*ReqUserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarPortService_MetaInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMetaInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarPortServiceServer).MetaInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car_port.CarPortService/MetaInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarPortServiceServer).MetaInfo(ctx, req.(*ReqMetaInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarPortService_ParkInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqParkInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarPortServiceServer).ParkInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car_port.CarPortService/ParkInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarPortServiceServer).ParkInfo(ctx, req.(*ReqParkInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarPortService_BillInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBillInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarPortServiceServer).BillInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car_port.CarPortService/BillInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarPortServiceServer).BillInfo(ctx, req.(*ReqBillInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarPortService_Park_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPark)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarPortServiceServer).Park(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car_port.CarPortService/Park",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarPortServiceServer).Park(ctx, req.(*ReqPark))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarPortService_PickUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPickUp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarPortServiceServer).PickUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car_port.CarPortService/PickUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarPortServiceServer).PickUp(ctx, req.(*ReqPickUp))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarPortService_Pay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPay)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarPortServiceServer).Pay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car_port.CarPortService/Pay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarPortServiceServer).Pay(ctx, req.(*ReqPay))
	}
	return interceptor(ctx, in, info, handler)
}

var _CarPortService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "car_port.CarPortService",
	HandlerType: (*CarPortServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCarPort",
			Handler:    _CarPortService_AddCarPort_Handler,
		},
		{
			MethodName: "UpdateCarPort",
			Handler:    _CarPortService_UpdateCarPort_Handler,
		},
		{
			MethodName: "GetCarPort",
			Handler:    _CarPortService_GetCarPort_Handler,
		},
		{
			MethodName: "MGetCarPort",
			Handler:    _CarPortService_MGetCarPort_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _CarPortService_UpdateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _CarPortService_GetUser_Handler,
		},
		{
			MethodName: "MGetUser",
			Handler:    _CarPortService_MGetUser_Handler,
		},
		{
			MethodName: "AddPark",
			Handler:    _CarPortService_AddPark_Handler,
		},
		{
			MethodName: "UpdatePark",
			Handler:    _CarPortService_UpdatePark_Handler,
		},
		{
			MethodName: "GetPark",
			Handler:    _CarPortService_GetPark_Handler,
		},
		{
			MethodName: "MGetPark",
			Handler:    _CarPortService_MGetPark_Handler,
		},
		{
			MethodName: "GetBill",
			Handler:    _CarPortService_GetBill_Handler,
		},
		{
			MethodName: "MGetBill",
			Handler:    _CarPortService_MGetBill_Handler,
		},
		{
			MethodName: "UserInfo",
			Handler:    _CarPortService_UserInfo_Handler,
		},
		{
			MethodName: "MetaInfo",
			Handler:    _CarPortService_MetaInfo_Handler,
		},
		{
			MethodName: "ParkInfo",
			Handler:    _CarPortService_ParkInfo_Handler,
		},
		{
			MethodName: "BillInfo",
			Handler:    _CarPortService_BillInfo_Handler,
		},
		{
			MethodName: "Park",
			Handler:    _CarPortService_Park_Handler,
		},
		{
			MethodName: "PickUp",
			Handler:    _CarPortService_PickUp_Handler,
		},
		{
			MethodName: "Pay",
			Handler:    _CarPortService_Pay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend.proto",
}
